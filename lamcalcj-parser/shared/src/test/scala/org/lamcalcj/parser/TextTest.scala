package org.lamcalcj.parser

import org.scalatest.FunSpec

class TextTest extends FunSpec {
  describe("Basic operations") {
    it("Should successfully handle text operations") {
      assert(Text("").empty)
      assert(!Text("x").empty)
      assertResult(0)(Text("").length)
      assertResult(1)(Text("x").length)
      assertResult("")(Text("").toString)
      assertResult("x")(Text("x").toString)
      assertResult(Text(""))(Text("") ++ Text(""))
      assertResult(Text("x"))(Text("x") ++ Text(""))
      assertResult(Text("y"))(Text("") ++ Text("y"))
      assertResult(Text("xy"))(Text("x") ++ Text("y"))
      assertResult(Option.empty)(Text("").head)
      assertResult(Option('x'))(Text("x").head)
      assertResult(Option('x'))(Text("xy").head)
      assertResult(Option.empty)(Text("").tail)
      assertResult(Option(Text("")))(Text("x").tail)
      assertResult(Option(Text("y")))(Text("xy").tail)
      assertResult(Option.empty)(Text("").uncons)
      assertResult(Option(('x', Text(""))))(Text("x").uncons)
      assertResult(Option(('x', Text("y"))))(Text("xy").uncons)
      assertResult(Text(""))(Text("").take(-1))
      assertResult(Text(""))(Text("").take(0))
      assertResult(Text(""))(Text("").take(1))
      assertResult(Text(""))(Text("x").take(-1))
      assertResult(Text(""))(Text("x").take(0))
      assertResult(Text("x"))(Text("x").take(1))
      assertResult(Text(""))(Text("xy").take(-1))
      assertResult(Text(""))(Text("xy").take(0))
      assertResult(Text("x"))(Text("xy").take(1))
      assertResult(Text(""))(Text("").drop(-1))
      assertResult(Text(""))(Text("").drop(0))
      assertResult(Text(""))(Text("").drop(1))
      assertResult(Text("x"))(Text("x").drop(-1))
      assertResult(Text("x"))(Text("x").drop(0))
      assertResult(Text(""))(Text("x").drop(1))
      assertResult(Text("xy"))(Text("xy").drop(-1))
      assertResult(Text("xy"))(Text("xy").drop(0))
      assertResult(Text("y"))(Text("xy").drop(1))
      assertResult((Text(""), Text("")))(Text("").splitAt(-1))
      assertResult((Text(""), Text("")))(Text("").splitAt(0))
      assertResult((Text(""), Text("")))(Text("").splitAt(1))
      assertResult((Text(""), Text("x")))(Text("x").splitAt(-1))
      assertResult((Text(""), Text("x")))(Text("x").splitAt(0))
      assertResult((Text("x"), Text("")))(Text("x").splitAt(1))
      assertResult((Text(""), Text("xy")))(Text("xy").splitAt(-1))
      assertResult((Text(""), Text("xy")))(Text("xy").splitAt(0))
      assertResult((Text("x"), Text("y")))(Text("xy").splitAt(1))
      assertResult(Text(""))(Text("").takeWhile(_ => false))
      assertResult(Text(""))(Text("").takeWhile(_ => true))
      assertResult(Text(""))(Text("").takeWhile(_ == 'x'))
      assertResult(Text(""))(Text("").takeWhile(_ == 'y'))
      assertResult(Text(""))(Text("x").takeWhile(_ => false))
      assertResult(Text("x"))(Text("x").takeWhile(_ => true))
      assertResult(Text("x"))(Text("x").takeWhile(_ == 'x'))
      assertResult(Text(""))(Text("x").takeWhile(_ == 'y'))
      assertResult(Text(""))(Text("xy").takeWhile(_ => false))
      assertResult(Text("xy"))(Text("xy").takeWhile(_ => true))
      assertResult(Text("x"))(Text("xy").takeWhile(_ == 'x'))
      assertResult(Text(""))(Text("xy").takeWhile(_ == 'y'))
      assertResult(Text(""))(Text("").dropWhile(_ => false))
      assertResult(Text(""))(Text("").dropWhile(_ => true))
      assertResult(Text(""))(Text("").dropWhile(_ == 'x'))
      assertResult(Text(""))(Text("").dropWhile(_ == 'y'))
      assertResult(Text("x"))(Text("x").dropWhile(_ => false))
      assertResult(Text(""))(Text("x").dropWhile(_ => true))
      assertResult(Text(""))(Text("x").dropWhile(_ == 'x'))
      assertResult(Text("x"))(Text("x").dropWhile(_ == 'y'))
      assertResult(Text("xy"))(Text("xy").dropWhile(_ => false))
      assertResult(Text(""))(Text("xy").dropWhile(_ => true))
      assertResult(Text("y"))(Text("xy").dropWhile(_ == 'x'))
      assertResult(Text("xy"))(Text("xy").dropWhile(_ == 'y'))
      assert(Text("").isPrefixOf(Text("")))
      assert(Text("").isPrefixOf(Text("x")))
      assert(Text("").isPrefixOf(Text("xy")))
      assert(!Text("x").isPrefixOf(Text("")))
      assert(Text("x").isPrefixOf(Text("x")))
      assert(Text("x").isPrefixOf(Text("xy")))
      assert(!Text("xy").isPrefixOf(Text("")))
      assert(!Text("xy").isPrefixOf(Text("x")))
      assert(Text("xy").isPrefixOf(Text("xy")))
      assertResult(Option.empty)(Text("")(-1))
      assertResult(Option.empty)(Text("")(0))
      assertResult(Option.empty)(Text("")(1))
      assertResult(Option.empty)(Text("x")(-1))
      assertResult(Option('x'))(Text("x")(0))
      assertResult(Option.empty)(Text("x")(1))
      assertResult(Option.empty)(Text("xy")(-1))
      assertResult(Option('x'))(Text("xy")(0))
      assertResult(Option('y'))(Text("xy")(1))
    }
  }
}
